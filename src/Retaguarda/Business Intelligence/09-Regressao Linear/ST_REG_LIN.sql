-----------------------------------------------------
-- SCRIPT CRIADO POR : MAURO C. PICHILIANI
-- DATA : 14/08/2006
-- DESCRIÇÃO: STORED PROCEDURE ST_REG_LIN
-- (REGRESSÃO LINEAR) E EXEMPLOS DE USO
-----------------------------------------------------


CREATE PROCEDURE ST_REG_LIN @TAB VARCHAR(100),
                            @COLX VARCHAR(100),
			    @COLY VARCHAR(100),
                            @PREV_VAL NUMERIC(20,4)
AS
BEGIN
	
	-- CRIAÇÃO DAS VARIÁVEIS UTILIZADAS NA PROCEDURE
	DECLARE	@MED_Y NUMERIC(20,4) -- MÉDIA DOS VALORES DE X

	DECLARE @CMD VARCHAR(8000) -- COMANDOS CONSTRUÍDOS DINAMICAMENTE

	DECLARE @S NUMERIC(20,4), @I NUMERIC(20,4), @RET NUMERIC(20,4) 

	DECLARE @EQUACAO VARCHAR(100) -- A EQUACAO A SER MOSTRADA
	DECLARE @R2 NUMERIC(20,4)     -- O VALOR R QUADRADO

	-- TABELAS TEMPORÁRIAS UTILIZADAS NA PROCEDURE	
	
	CREATE TABLE #TB_TMP
	(
		N INT,   		-- QTD DE LINHAS
		SX NUMERIC(20,4),       -- SOMATÓRIO DE X
	        SY NUMERIC(20,4),       -- SOMATÓRIO DE Y
		S_X_Y NUMERIC(20,4),    -- SOMATÓRIO DE X * Y
		SX_Q NUMERIC(20,4),     -- SOMATÓRIO DE X QUADRADO
	        MED_X NUMERIC(20,4),    -- MÉDIA DE X
	        MED_Y NUMERIC(20,4)     -- MÉDIA DE Y
	
	)

	CREATE TABLE #TB_R2
	(
		R2 NUMERIC(20,4)
	)


	-- CHECAGEM DA EXISTÊNCIA DA TABELA E DAS COLUNAS

	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = @TAB)
	BEGIN
		SELECT 'TABELA NAO EXISTE NA BASE' AS ERRO
		RETURN
	END

	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TAB AND COLUMN_NAME = @COLX)
	BEGIN
		SELECT 'COLUNA ' + @COLX + ' NÃO EXISTE NA TABELA ' + @TAB AS ERRO
		RETURN
	END

	IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @TAB AND COLUMN_NAME = @COLY)
	BEGIN
		SELECT 'COLUNA ' + @COLY + ' NÃO EXISTE NA TABELA ' + @TAB AS ERRO
		RETURN
	END


	-- CALCULANDO OS VALORES DAS COLUNAS DA TABELA TEMPORÁRIA #TB_TMP
	SET @CMD = 'SELECT COUNT(*)'
	SET @CMD = @CMD + ', SUM(' + @COLX + ')'
	SET @CMD = @CMD + ', SUM(' + @COLY + ')'
	SET @CMD = @CMD + ', SUM(' + @COLX + '*' + @COLY + ')'
	SET @CMD = @CMD + ', SUM(' + @COLX + '*' + @COLX + ')'
	SET @CMD = @CMD + ', AVG(' + @COLX + ')'
	SET @CMD = @CMD + ', AVG(' + @COLY + ')'
	SET @CMD = @CMD + ' FROM ' + @TAB

	INSERT #TB_TMP
	EXEC (@CMD)

	SELECT @MED_Y  = MED_Y
	FROM #TB_TMP


	-- CALCULANDO O COEFICIENTE DE X NA EQUAÇÃO
	SELECT @S = (N*S_X_Y - (SX*SY)) / (N*SX_Q-(SX*SX))
	FROM #TB_TMP                

	-- CALCULANDO O PONTO ONDE A RETA TOCA O EIXO DO X
	SELECT @I = MED_Y - @S*MED_X
	FROM #TB_TMP               

	-- MONTANDO A EQUACAO
	SET @EQUACAO = 'Y = ' + CONVERT(VARCHAR(50),@S) + '*X '		

	-- CALCULANDO O VALOR DESEJADO
	SET @RET = @S*@PREV_VAL + @I

	IF @I >= 0
	BEGIN

		SET @EQUACAO = @EQUACAO + '+ ' + CONVERT(VARCHAR(50),@I)
	END
	ELSE
	BEGIN

		SET @EQUACAO = @EQUACAO + ' ' + CONVERT(VARCHAR(50),@I)

	END

	-- CALCULANDO O R QUADRADO

	SET @CMD = 'SELECT 1 - (SUM('
	SET @CMD = @CMD + '(' + @COLY + '- (' + CONVERT(VARCHAR(50),@S) + '*' + @COLX +  '+' + CONVERT(VARCHAR(50),@I) + '))*'
	SET @CMD = @CMD + '(' + @COLY + '- (' + CONVERT(VARCHAR(50),@S) + '*' + @COLX +  '+' +  CONVERT(VARCHAR(50),@I) + ')) )/'
	SET @CMD = @CMD + 'SUM(   (' + @COLY + '- ' +  CONVERT(VARCHAR(50),@MED_Y) + ') * (' + @COLY + '- '  + CONVERT(VARCHAR(50),@MED_Y) + ') ) )'
	SET @CMD = @CMD + ' FROM ' + @TAB

	INSERT #TB_R2
	EXEC (@CMD)

	-- MOSTRANDO OS DADOS
	IF (SELECT R2 FROM #TB_R2) >= 0.8
	BEGIN
		SELECT @EQUACAO AS EQUACAO
                      ,@RET AS VAL_PREVISTO
		      , (SELECT R2 FROM #TB_R2) AS R2
		      , 'MODELO LINEAR' AS MODELO

	END
	ELSE
	BEGIN

		SELECT @EQUACAO AS EQUACAO
                      ,@RET AS VAL_PREVISTO
		      , (SELECT R2 FROM #TB_R2) AS R2
		      , 'MODELO NÃO LINEAR' AS MODELO
	END

END


/* TESTES DA PROCEDURE */


CREATE TABLE TB_POPULACAO
(
	ANO INT,
	QTD NUMERIC(10,2)
)

INSERT TB_POPULACAO VALUES(1980,2.1)
INSERT TB_POPULACAO VALUES(1985,2.9)
INSERT TB_POPULACAO VALUES(1990,3.2)
INSERT TB_POPULACAO VALUES(1995,4.1)
INSERT TB_POPULACAO VALUES(2000,4.9)

SELECT * FROM TB_POPULACAO


EXEC ST_REG_LIN 'TB_POPULACAO','ANO','QTD',2005

DROP TABLE TB_HIST_PRECO
CREATE TABLE TB_HIST_PRECO
(
	ANO VARCHAR(20),
	PREC_UNIT NUMERIC(20,4),
	QTD_VENDIDA NUMERIC(10,2)
)


/* OUTRO TESTE DA PROCEDURE */
INSERT TB_HIST_PRECO VALUES('Ano 1',	1.62,	159)
INSERT TB_HIST_PRECO VALUES('Ano 2',	1.667,	160)
INSERT TB_HIST_PRECO VALUES('Ano 3',	1.69,	163)
INSERT TB_HIST_PRECO VALUES('Ano 4',	1.7,	166)
INSERT TB_HIST_PRECO VALUES('Ano 5',	1.72,	167)
INSERT TB_HIST_PRECO VALUES('Ano 6',	1.73,	167)
INSERT TB_HIST_PRECO VALUES('Ano 7',	1.736	,168)
INSERT TB_HIST_PRECO VALUES('Ano 8',	1.74	,167)
INSERT TB_HIST_PRECO VALUES('Ano 9',	1.75	,167.9)
INSERT TB_HIST_PRECO VALUES('Ano 10',	1.755	,168.9)
INSERT TB_HIST_PRECO VALUES('Ano 11',	1.756	,169)
INSERT TB_HIST_PRECO VALUES('Ano 12',	1.77	,169)
INSERT TB_HIST_PRECO VALUES('Ano 13',	1.767	,170)
INSERT TB_HIST_PRECO VALUES('Ano 14',	1.756	,171)
INSERT TB_HIST_PRECO VALUES('Ano 15',	1.77	,172)

SELECT *
FROM TB_HIST_PRECO

EXEC ST_REG_LIN 'TB_HIST_PRECO','PREC_UNIT','QTD_VENDIDA',2.0




